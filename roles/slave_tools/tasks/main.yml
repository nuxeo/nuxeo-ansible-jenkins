---
- name: Get AWS ID
  debug: msg="{{lookup('env','AWS_ACCESS_KEY_ID')}}"
  no_log: true
  register: aws_id
- name: Get AWS secret
  debug: msg="{{lookup('env','AWS_SECRET_ACCESS_KEY')}}"
  no_log: true
  register: aws_secret
- name: Stop if credentials are missing
  fail: msg="You must have AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY in your environment"
  when: aws_id.msg == "" or aws_secret.msg == ""

- name: Create user 'jenkins'
  user: name=jenkins home=/opt/jenkins state=present shell=/bin/bash
- file: path=/opt/jenkins/ state=directory owner=jenkins group=jenkins

- name: Tooling dirs
  file: path=/opt/build state=directory owner=jenkins group=jenkins
- file: path=/opt/build/tools state=directory owner=jenkins group=jenkins
- file: path=/opt/build/hudson state=directory owner=jenkins group=jenkins

- name: Add git-core ppa
  apt_repository: repo='ppa:git-core'
- name: Update apt cache
  apt: update_cache=yes cache_valid_time=7200
- name: Upgrade/install ansible dependencies
  apt: state=latest name={{item}}
  with_items:
  - aptitude
  - python-httplib2
  - apt-transport-https
- name: Update existing packages
  apt: upgrade=full
- name: Upgrade/install build dependencies
  apt: state=latest name={{item}}
  with_items:
  - ntp
  - python-httplib2
  - python-virtualenv
  - git
  - mercurial
  - subversion
  - chromium-browser
  - ant
  - ant-contrib
  - imagemagick
  - mediainfo
  - ffmpeg2theora
  - lynx
  - sysstat
  - logtail
  - gawk
  - vim
  - wget
  - curl
  - unzip
  - moreutils
  - ufraw
  - poppler-utils
  - libreoffice
  - libwpd-tools
  - xvfb
  - x11vnc
  - fluxbox
  - linkchecker
  - w3c-linkchecker
  - tree
  - libimage-exiftool-perl
  - libyaml-0-2
  - libyaml-dev
  - dpkg-dev
  - debhelper
  - lintian
  - zip
  - libc6-i386
  - g++-multilib
  - libssl-dev
  - ruby2.5
  - ruby2.5-dev
  - aspell
  - jq
  - net-tools
  # Android SDK
  - lib32z1
  - lib32ncurses5
  # Amazon S3
  - s3cmd
  # Funkload requirements
  - python-dev
  - python-pip
  - python-setuptools
  - python-webunit
  - python-docutils
  - gnuplot
  - python-reportlab
  - python-pypdf2
  - build-essential
  - zlib1g-dev
  - libbz2-dev
  - libreadline-dev
  - libsqlite3-dev
  - llvm
  - libncurses5-dev
  - libncursesw5-dev
  - xz-utils
  # Useful to have
  - python-lxml
  - python-yaml
  - xmlstarlet
  - gdebi-core
  - shunit2
  - libxml2-utils
  - libkrb5-dev
  # Python 3 stuff
  - python3-dev
  - python3-pip
  - python3-venv
  tags: apt
- name: Fix ImageMagick policy
  replace: dest=/etc/ImageMagick-6/policy.xml regexp='rights="none" pattern="(PS|EPS|PDF|XPS)"' replace='rights="read|write" pattern="\1"'
- apt: state=latest name=tcpwatch-httpproxy install_recommends=no
- pip: name=logchart
- pip: name=boto
- pip: name=docker-py
- pip: name=awscli
- pip: name=requests
- alternatives: name=editor path=/usr/bin/vim.basic
# Xvfb, x11vnc, fluxbox
- copy: src=xvfb dest=/etc/init.d/xvfb
        mode=755 owner=root group=root
  when: "'docker' not in group_names"
- service: name=xvfb enabled=yes state=started
  when: "'docker' not in group_names"

# FFmpeg build with x264, vpx and AAC support if needed
- name: Check for ffmpeg
  command: dpkg-query -W ffmpeg-nuxeo
  register: ffmpegcheck
  failed_when: ffmpegcheck.rc > 1
  changed_when: false
- name: Get ffmpeg package
  s3: bucket={{s3_bucket}} region={{s3_region}}
      object=/{{s3_tools_path}}/ffmpeg-nuxeo_2.8.12-1_amd64.deb
      dest=/tmp/ffmpeg-nuxeo_2.8.12-1_amd64.deb mode=get
      aws_access_key={{aws_id.msg}} aws_secret_key={{aws_secret.msg}}
  when: ffmpegcheck.rc == 1
- name: Install ffmpeg
  command: dpkg -i /tmp/ffmpeg-nuxeo_2.8.12-1_amd64.deb
  when: ffmpegcheck.rc == 1
- file: path=/tmp/ffmpeg-nuxeo_2.8.12-1_amd64.deb state=absent

# CCExtractor pre-built from sources
- name: Check for ccextractor
  command: dpkg-query -W ccextractor-nuxeo
  register: ccxcheck
  failed_when: ccxcheck.rc > 1
  changed_when: false
- name: Get ccextractor package
  s3: bucket={{s3_bucket}} region={{s3_region}}
      object=/{{s3_tools_path}}/ccextractor-nuxeo_0.0.1-20181003-01-1_amd64.deb
      dest=/tmp/ccextractor-nuxeo_0.0.1-20181003-01-1_amd64.deb mode=get
      aws_access_key={{aws_id.msg}} aws_secret_key={{aws_secret.msg}}
  when: ccxcheck.rc == 1
- name: Install ccextractor
  command: gdebi --n /tmp/ccextractor-nuxeo_0.0.1-20181003-01-1_amd64.deb
  when: ccxcheck.rc == 1
- file: path=/tmp/ccextractor-nuxeo_0.0.1-20181003-01-1_amd64.deb state=absent

# Firefox
# Can't use APT which pulls unfixed FF version
- include: firefox.yml

# Google Chrome
- name: Check for Google Chrome
  stat: path=/usr/bin/google-chrome
  register: chromeinstalled
- include: google-chrome.yml
  when: not chromeinstalled.stat.exists
  tags: chrome

# Java versions
- include: java6.yml
  tags: java,java6
- include: java7.yml
  tags: java,java7
- include: java8.yml
  tags: java,java8
- name: OpenJDK 8
  apt: name=openjdk-8-jdk state=latest
  tags: java,java8
- include: java9.yml
  tags: java, java9
- include: java11.yml
  tags: java, java11

#- name: Set default to OpenJDK 8
#  alternatives: name=java path=/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
#  tags: java,java8
- name: Set default to Oracle JDK 8
  alternatives: name=java path=/usr/lib/jvm/java-8/jre/bin/java
  tags: java,java8

# Maven
- include: maven.yml
  tags: maven

# Gradle
- name: Check for gradle
  shell: gradle -v | grep Gradle | head -n 1 | awk '{print $2}'
  register: gradleversion
  failed_when: false
  changed_when: false
  tags: gradle
- include: gradle.yml
  when: gradleversion.rc != 0 or gradleversion.stdout != "1.6"
  tags: gradle

# Android
- include: android.yml

# Rake
- include: rake.yml
  tags: rake

# Fastlane
- include: fastlane.yml
  tags: fastlane

# rdoc
- include: rdoc.yml
  tags: rdoc

- name: Spot instance Jenkins callback script
# use https://qa.nuxeo.org/jenkins/plugin/ec2/AMI-Scripts/ubuntu-ami-setup.sh once ec2 plugin upgraded
  get_url: url=https://github.com/jenkinsci/ec2-plugin/raw/master/src/main/webapp/AMI-Scripts/ubuntu-init.py
           dest=/usr/bin/userdata mode=0750
           validate_certs=no
  when: "'docker' not in group_names and 'local' not in group_names"
- lineinfile: dest=/etc/rc.local backup=true state=present
              regexp='^python /usr/bin/userdata$' line='python /usr/bin/userdata' insertbefore='^exit 0'
  when: "'docker' not in group_names and 'local' not in group_names"
- lineinfile: dest=/etc/rc.local backup=true state=present
              regexp='^.*use_mnt.sh.*$' line='/opt/jenkins/use_mnt.sh || true' insertbefore='^python /usr/bin/userdata'
  when: "'aws' in group_names"

# NodeJS
- include: nodejs.yml
  tags: nodejs

# yarn
- name: Check for yarn
  stat: path=/usr/bin/yarn
  register: yarninstalled
- include: yarn.yml
  when: not yarninstalled.stat.exists
  tags: yarn

# Dart
- name: Check for dart
  stat: path=/usr/bin/dart
  register: dartinstalled
  tags: dart
- include: dart.yml
  when: not dartinstalled.stat.exists
  tags: dart

# MongoDB client
- name: Check for mongo
  shell: mongo --version | awk '{print $NF}' | tr '.' ' ' | awk '{print $1"."$2}'
  register: mongoinstalled
  changed_when: false
  failed_when: mongoinstalled.rc > 1
  tags: mongodb
- include: mongodb.yml
  when: mongoinstalled.stdout != "3.2"
  tags: mongodb

# MySQL
- include: mysql.yml

# Redis
- include: redis.yml

# Azure CLI
- name: Install Azure CLI
  npm: name=azure-cli version=0.10.7 global=yes
  register: azure_install
  tags: azure-cli
- name: Check for azure binary
  stat: path=/usr/local/bin/azure
  register: azureinbin
  tags: azure-cli
- name: Add azure symlink
  file: path=/usr/local/bin/azure src=/opt/build/tools/node-v10.23.0-linux-x64/bin/azure state=link
  when: not azureinbin.stat.exists
  tags: azure-cli

# NSIS
- include: nsis.yml
  tags: nsis

# Docker
- name: Check for docker
  stat: path=/usr/bin/docker
  register: docker_installed
  tags: docker
- include: docker.yml
  when: not docker_installed.stat.exists
  tags: docker
- name: Docker compose
  get_url: url=https://github.com/docker/compose/releases/download/1.14.0/docker-compose-Linux-x86_64
          dest=/usr/local/bin/docker-compose
          validate_certs=no
- file: path=/usr/local/bin/docker-compose mode=0755

# Packer
- include: packer.yml
  tags: packer

# libsass - replace with standard package when upgrading ubuntu
- name: Check for libsass
  command: dpkg-query -W libsass-nuxeo
  register: libsasscheck
  failed_when: libsasscheck.rc > 1
  changed_when: false
- name: Get libsass package
  s3: bucket={{s3_bucket}} region={{s3_region}}
      object=/{{s3_tools_path}}/libsass-nuxeo_3.3.6-1_amd64.deb
      dest=/tmp/libsass-nuxeo_3.3.6-1_amd64.deb mode=get
      aws_access_key={{aws_id.msg}} aws_secret_key={{aws_secret.msg}}
  when: libsasscheck.rc == 1
- name: Install libsass
  command: dpkg -i /tmp/libsass-nuxeo_3.3.6-1_amd64.deb
  when: libsasscheck.rc == 1
- file: path=/tmp/libsass-nuxeo_3.3.6-1_amd64.deb state=absent

# slave.jar
- name: Install current slave.jar
  file: path=/opt/jenkins/bin state=directory owner=jenkins group=jenkins
- get_url: url=https://qa.nuxeo.org/jenkins/jnlpJars/slave.jar
           dest=/opt/jenkins/bin/slave.jar
           validate_certs=no
  become_user: jenkins

# Docker environment
- name: Check for custom init system
  stat: path=/etc/my_init.d
  register: myinitd
- name: Install environment setup file
  copy: src=10_setup_environment.sh dest=/etc/my_init.d/10_setup_environment.sh
        mode=0755 owner=root group=root
  when: myinitd.stat.exists
- name: Install slave.jar download script
  copy: src=20_update_slave_jar.sh dest=/etc/my_init.d/20_update_slave_jar.sh
        mode=0755 owner=root group=root
  when: myinitd.stat.exists
- name: Install rubygems setup file
  copy: src=30_setup_rubygems.sh dest=/etc/my_init.d/30_setup_rubygems.sh
        mode=0755 owner=root group=root
  when: myinitd.stat.exists
- file: path=/etc/service/namettl state=directory
  when: myinitd.stat.exists
- name: Add name keepalive script for multidb env
  copy: src=namettl dest=/etc/service/namettl/run mode=0755
  when: myinitd.stat.exists
- name: Disable name keepalive script by default
  file: path=/etc/service/namettl/down state=touch
  when: myinitd.stat.exists

- include: postgresql.yml

- include: git-lfs.yml

- name: Check for terraform
  stat: path=/usr/bin/terraform
  register: terraform_installed
  tags: terraform
- include: terraform.yml
  when: not terraform_installed.stat.exists
  tags: terraform

- include: golang.yml
